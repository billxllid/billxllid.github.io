<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Kali使用技巧]]></title>
    <url>%2F2018%2F06%2F11%2FKali%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[Kali使用技巧安装 OpenVAS启动停止管理用户安装 chrome以root身份运行chrome解决打开时弹“输入密码以解锁您的登录密钥环”问题安装 proxychains+shadowsocks安装 VMware ToolsMetasploit 自动连接 postgresql系统更新失败解决办法声明 安装 OpenVAS参考：Configuring and Tuning OpenVAS in Kali Linux 、OpenVAS 8.0 Vulnerability Scanning、 openVAS 官网。使用下面方法进行安装：12345root@kali:~# apt-get updateroot@kali:~# apt-get dist-upgraderoot@kali:~# apt-get install openvasroot@kali:~# openvas-setup 启动停止12345678910# 启动root@kali:~# openvas-startStarting OpenVas ServicesStarting Greenbone Security Assistant: gsad.Starting OpenVAS Scanner: openvassd.Starting OpenVAS Manager: openvasmd.# 停止root@kali:~# openvas-stopStopping OpenVas Services 管理用户运行openvasmd –-create-user用于添加新用户：12345root@kali:~# openvasmd --create-user=dookieUser created with password 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyy'.root@kali:~# openvasmd --get-usersadmindookie修改密码：12root@kali:~# openvasmd --user=dookie --new-password=s3cr3troot@kali:~# openvasmd --user=admin --new-password=sup3rs3cr3t 安装 chrome由于沙箱的缘故，kali 使用 chrome 需要使用 root 方式，这样就处罚了 chrome 的安全机制，需要添加参数。安装步骤只需要进行以下几步：打开 chrome 网站，下载到.deb 安装文件；进入到下载目录，执行dpkg --install xxx.deb进行安装；安装过程依赖问题报错需要使用apt-get -f install进行修复；修复完成以后，再运行安装命令即可安装。 以root身份运行chrome直接在桌面使用 root 打开 chrome 是没有反应的，因为出发了保护机制。官方说要追加--no-sandbox参数才能继续（我直接使用绝对路径/opt/goole/chrome/google-chrome打开时通过错误信息才发现的。），需要进行以下操作：使用任意文本编辑器打开文件/opt/goole/chrome/google-chrome，定位到最下方看到诸如以下内容:12# Note: exec -a below is a bashism.exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot;这里只需要修改为以下内容即可：12# Note: exec -a below is a bashism.exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot; --no-sandbox保存后重新打开即可。 解决打开时弹“输入密码以解锁您的登录密钥环”问题这个问题简直是莫名其妙，输入 root 密码居然说不对…使用如下方法解决：首先在终端输入seahorse打开“密码与密钥”（如果命令不存在使用apt-get install seahores安装即可）;首先删除默认的“密码”下的“Login”或者“登录”，右键点击里面就有删除；删除完后退出，重新打开 chrome，还会弹窗，直接输入两个回车（也就是都为空）。会提示“以不加密方式存储密码吗？”，直接“继续”即可。 安装 proxychains+shadowsocks主要为了挂代理干大事，更新啊啥的还是用 proxychains 快点。Kali 原生其实带 3.x 的 proxychains 的，但是版本太低不支持新版 apt 工具，所以需要改成 proxychains-ng 也就是 4.0。step1. 首先需要删除 Kali 原生的 proxychains，使用apt-get remove proxychains删除。step2. 进入Github 地址下载安装，官方文档介绍安装方法很清楚了，使用编译的方法安装即可：1234567891011*** Installation *** git clone https://github.com/rofl0r/proxychains-ng.git cd proxychains-ng # needs a working C compiler, preferably gcc ./configure --prefix=/usr --sysconfdir=/etc make [optional] sudo make install [optional] sudo make install-config (installs proxychains.conf) # if you dont install, you can use proxychains from the build directory like this: ./proxychains4 -f src/proxychains.conf telnet google.com 80step3.  接下来进入pip-shadowsocks安装 ss：12345678# Install# Debian / Ubuntu:apt-get install python-pippip install shadowsocks# CentOS:yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocksstep4. 添加配置文件：123456789101112// /etc/shadowsocks.json&#123; "server":"207.148.26.251", "server_port":543, "local_port":1080, "password":"z4931568", "timeout":600, "method":"aes-256-cfb"&#125;// /root/start-shadosocks.shsslocal -c /etc/shadowsocks.json -d startstep5. 启动时候会报错“loading libcrypto from libcrypto.so.1.1”的错误，这个问题是由于在 openssl1.1.0 版本中，废弃了 EVP_CIPHER_CTX_cleanup 函数。按照下面的方法调整一下：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用 find 命令查找文件位置)；在 vim 中输入:%s/cleanup/reset/g保存并退出step6. 修改/etc/proxychains.conf，最后一行换成socks5 127.0.0.1 1080即可完成安装。 安装 VMware Tools参考官方文档。12345apt update &amp;&amp; apt -y full-upgrade# Reboot now in case you have updated to a new kernel. Once rebooted:apt -y --reinstall install open-vm-tools-desktop fusereboot安装完成后还需要在查看-》自动调整大小中勾选“自动适应客户机”和“自动适应窗口” Metasploit 自动连接 postgresql简述： Kali 自带的 Metasploit 与 ppstgresql 不会自动连接，时常出现&quot;[-] Database not connected&quot;的问题，为了解决这个问题需要让这俩自动连接。其他内容可参考这边文章。1、使 Postgresql 自启动script12345678910111213141516171819202122systemctl status postgresql Active: inactive (dead)systemctl enable postgresql Executing: /lib/systemd/systemd-sysv-install enable postgresqlsystemctl start postgresqlmsfdb init [i] Database already started [+] Creating database user 'msf' 为新角色输入的口令: 再输入一遍: [+] Creating databases 'msf' [+] Creating databases 'msf_test' [+] Creating configuration file '/usr/share/metasploit-framework/config/database.yml' [+] Creating initial database schemamsfconsolemsf &gt; db_status [*] postgresql connected to msf 系统更新失败解决办法参考：Kali Linux 更新失败。报错中可以看出是由于密钥过期。首先使用查看系统里所有的密钥信息：1apt-key list通过输出结果的最后一行就是导致这次问题的公钥，到期时间是 2018 年 2 月 2 日（有效期大约是 6 年）。具体更新方法有以下几种方法：（任选一种即可）123456789101112131、apt-key adv --keyserver keys.gnupg.net --recv-keys ED444FF07D8D0BF62、wget -q -O - archive.kali.org/archive-key.asc | apt-key add3、gpg --keyserver hkp://pgpkeys.mit.edu --recv-key ED444FF07D8D0BF6gpg -a --export ED444FF07D8D0BF6 | sudo apt-key add -4、wget https://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2018.1_all.debapt install ./kali-archive-keyring_2018.1_all.deb 声明版权： 2018-now，🇨🇳，zangjiaao&lt;zangjiaao@yahoo.com&gt;由家浩创作并维护的zangjiaao's blog博客所有文章除特别声明外，均采用&quot;创作共用保留署名-非商业-禁止演绎4.0国际许可证&quot;。本文首发于zangjiaao’s blog博客，转载请注明出处。]]></content>
      <categories>
        <category>03_工具手册</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cmder美化与增强]]></title>
    <url>%2F2018%2F06%2F10%2FCmder%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%A2%9E%E5%BC%BA%2F</url>
    <content type="text"><![CDATA[Cmder 配置安装 Chocolatey 包管理安装 Cmder方法 a：Chocolatey方法 b：官网下载 full 版本安装 Powerline 字体安装 Posh-Git 及 Oh-My-Posh安装 Get-ChildItemColor配置 PowerShell 的$PROFILE声明效果图： 安装 Chocolatey 包管理参考： Pimping Up Your PowerShell &amp; Cmder with Posh-Git, Oh-My-Posh, &amp; Powerline Fonts使用管理员身份打开 Powershell，执行下面的命令修改执行权限：1Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Force这里 PS 可能会报错，权限除了RemoteSigned还可以改为ByPass、Unrestricted，执行Get-ExecutionPolicy检查当前状态。随后使用下面命令安装 chocolatey：1iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex 安装 Cmder 方法 a：Chocolatey执行下面命令进行安装：1cinst cmder -y这个方法貌似不带 git 等工具，还需要单独安装，我选择方法 b 安装。 方法 b：官网下载 full 版本直接去官网下载。 安装 Powerline 字体运行下面命令：123git clone https://github.com/powerline/fonts.gitcd fonts.\install.ps1但是这个方法安装的是所有字体，比较慢也没有必要，只需要安装这个字体即可。 安装 Posh-Git 及 Oh-My-Posh简介： Posh-Git (PowerShell Git) 主要用于当你进入一个包含 git 项目时，显示项目信息。Oh-My-Posh 则主要用于定义 Posh-Git 的主题。运行下面的命令安装Posh-Git：123Install-PackageProvider NuGet -MinimumVersion '2.8.5.201' -ForceSet-PSRepository -Name PSGallery -InstallationPolicy TrustedInstall-Module -Name 'posh-git'运行下面的命令安装Oh-My-Posh:1Install-Module -Name 'oh-my-posh'可以前往oh-my-posh预览主题。 安装 Get-ChildItemColor简介： 主要用于定义列目录风格，Get-ChildItemColor是传统 PS 风格，Get-ChildItemColorFormatWide是类 Unix 风格，下面配置文件里面也会映射l及ls来替代。运行下面的命令进行安装：1Install-Module -Name 'Get-ChildItemColor' 配置 PowerShell 的$PROFILE这里默认的$PROFILE 是C:\Users\18354\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，如果修改这个文件会联动到 Powershell，但是我比较习惯只修改 cmder 的配置文件%CMDER_ROOT%\vendor\profile.ps1，只需要在最后追加下面内容即可：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# Ensure that Get-ChildItemColor is loadedImport-Module Get-ChildItemColor# Set l and ls alias to use the new Get-ChildItemColor cmdletsSet-Alias l Get-ChildItemColor -Option AllScopeSet-Alias ls Get-ChildItemColorFormatWide -Option AllScope# Helper function to change directory to my development workspace# Change c:\ws to your usual workspace and everytime you type# in cws from PowerShell it will take you directly there.function cws &#123; Set-Location c:\ws &#125;# Helper function to set location to the User Profile directoryfunction cuserprofile &#123; Set-Location ~ &#125;Set-Alias ~ cuserprofile -Option AllScope# Helper function to show Unicode characterfunction U&#123; param ( [int] $Code ) if ((0 -le $Code) -and ($Code -le 0xFFFF)) &#123; return [char] $Code &#125; if ((0x10000 -le $Code) -and ($Code -le 0x10FFFF)) &#123; return [char]::ConvertFromUtf32($Code) &#125; throw "Invalid character code $Code"&#125;# Ensure posh-git is loadedImport-Module -Name posh-git# Start SshAgent if not already# Need this if you are using github as your remote git repositoryif (! (ps | ? &#123; $_.Name -eq 'ssh-agent'&#125;)) &#123; Start-SshAgent&#125;# Ensure oh-my-posh is loadedImport-Module -Name oh-my-posh# Default the prompt to agnoster oh-my-posh themeSet-Theme agnoster 声明版权： 2018-now，🇨🇳，zangjiaao&lt;zangjiaao@yahoo.com&gt;由家浩创作并维护的zangjiaao's blog博客所有文章除特别声明外，均采用&quot;创作共用保留署名-非商业-禁止演绎4.0国际许可证&quot;。本文首发于zangjiaao’s blog博客，转载请注明出处。]]></content>
      <categories>
        <category>05_日常折腾</category>
      </categories>
      <tags>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebGoat项目搭建]]></title>
    <url>%2F2018%2F06%2F10%2FWebGoat%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[WebGoat项目搭建简介准备部署WebGoat项目声明 简介本次操作在mac下进行。主要是为了源码方式运行WebGoat/WebGoat，然后学习java代码审计。 准备jdk安装: 官网下载jdk8。然后配置环境变量，写到/etc/profile里。1export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Homemaven安装: 官网下载二进制包。建议解压到/usr/local/apache-maven中。然后配置环境变量，写到/etc/profile里。随后使用mvn -version查看一下版本。1234export M2_HOME=/usr/local/apache-maven/apache-maven-3.5.3export M2=$M2_HOME/binexport MAVEN_OPTS="-Xms256m -Xmx512m"export PATH=$M2:$PATH 部署WebGoat项目依据官网文档中的方法。下载源码:1git clone git@github.com:WebGoat/WebGoat.git部署:12cd WebGoatmvn clean installmvn编译到xxe时候会报错，提示maven-surefire-plugin的There are test failures错误(参考)，需要在pom.xml文件中build节点下plugins节点中下添加下面内容：1234567&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt; &lt;/configuration&gt;&lt;/plugin&gt;运行:WebGoat使用Spring-boot启动：1234# 运行webgoat-servermvn -pl webgoat-server spring-boot:run# 运行webwolf，注意这里的目录也是 WebGoat/mvn -pl webwolf spring-boot:runwebgoat访问地址:1http://localhost:8080/WebGoatwebwolf访问地址:1http://127.0.0.1:8081/login📖 说明： mvn参数：-am, --alsomake: 同时构建所列模块的依赖模块模块；-amd, --also-make-dependents: 同时构建依赖于所列模块的模块；-pl, --projects&lt;arg&gt;: 构建指定模块，模块间用逗号分割；-rf, -resume-from&lt;arg&gt;: 从指定的模块回复反应堆。IDEA联动: IDEA默认自带maven环境，不想用那个的话可以在IDEA中的终端，可以在设置中搜索maven更改环境路径。 声明版权： 2018-now，🇨🇳，zangjiaao&lt;zangjiaao@yahoo.com&gt;由家浩创作并维护的zangjiaao's blog博客所有文章除特别声明外，均采用&quot;创作共用保留署名-非商业-禁止演绎4.0国际许可证&quot;。本文首发于zangjiaao’s blog博客，转载请注明出处。]]></content>
      <categories>
        <category>02_环境搭建</category>
      </categories>
      <tags>
        <tag>WebGoat</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim使用技巧]]></title>
    <url>%2F2018%2F06%2F09%2FVim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[vim使用技巧技巧* Tips001:数字快捷加减* Tips002:快捷删除、修改* Tips005:快捷新旧位置跳转* Tips006:上一步与取消上一步* Tips009:替换、转换* Tips010:查找* Tips011:缩进* Tips012:保存、读取Tips003:模式切换Tips004:显示文件信息Tips007:剪贴板Tips008:插入特殊编码字符配置* 搜索、高亮命令补全窗口切换* 告警静音声明为了方便查找记忆，只记录一些实用技巧，基础操作不涉及。 技巧 * Tips001:数字快捷加减&lt;C-a&gt;: 对数字进行加操作。&lt;C-x&gt;: 对数字进行减操作。💡 技巧： 连在一起的数字被视为一个数字。可以使用{number}&lt;C-a&gt;或者{number}&lt;C-x&gt;进行计算，可配合.进行操作。 * Tips002:快捷删除、修改i_&lt;C-w&gt;: 删除前一个单词。i_&lt;C-h&gt;: 删除前一个字符。i_&lt;C-u&gt;: 删至行首。ce: 从光标删除到词尾，并进入插入模式。c$：从光标删除到行尾，并进入插入模式。cw：从光标删除到下一个单词词首，并进入插入模式。C: 等同于c$。D：删除从光标到结尾的内容，同d$。R: 进入替换模式，按&lt;ESC&gt;键退出。 * Tips005:快捷新旧位置跳转&lt;C-O&gt;: 跳转回旧位置。&lt;C-I&gt;: 跳转到新位置。 * Tips006:上一步与取消上一步&lt;C-R&gt;: 回到撤销前状态。 * Tips009:替换、转换~：转换一个字母大小写。{num}~：转换指定数量的字母大小写。g~~：转换当前一行字母大小写。sv_U | v_u：view模式下，转换大小写。gUU | guu：将一行全部转至大写活或者小写。{num}gUU：将指定数量的行进行转换。gUw | guw：将光标下的单词转换。:s/old/new: 行内一次替换。:s/old/new/g: 行内全部替换。:{line_num1},{line_num2}s/old/new/g: 多行替换。:%s/old/new/g: 全文替换。:%s/old/new/gc: 每次替换进行询问。💡 技巧： View模式下，可以在选中区域里替换。 * Tips010:查找\: 正向查找。?: 反向查找。 * Tips011:缩进&gt;G: 让下面的内容缩进。💡 技巧： View模式下，可以将选中区域进行缩进。 * Tips012:保存、读取:w FILENAME: 保存并命名，重复使用会新建文件。v_:w FILENAME: 可将选中部分保存到文件。:r FILENAME: 可提取磁盘文件，将其插入到当前文件的光标位置。:r !dir: 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。 Tips003:模式切换&lt;C-[&gt;: 切换到普通模式，不过习惯&lt;ESC&gt;退出了。&lt;C-o&gt;: 临时切换插入-普通模式。 Tips004:显示文件信息&lt;C-G&gt;: 显示当前光标所在位置和文件状态信息。 Tips007:剪贴板i_&lt;C-p&gt;: 显示寄存器列表，但是只能在VIM中使用。 Tips008:插入特殊编码字符i_&lt;C-v&gt;: 插入模式下，用来使用ASCII或UNICOD码插入某个特殊字符。 配置输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下： * 搜索、高亮ic | ignorecase：查找时忽略字母大小写。is | incsearch：查找短语时显示部分匹配。hls | hlsearch：高亮显示所有的匹配短语。 命令补全&lt;C-D&gt;: 查看可能的补全结果。&lt;TAB&gt;: 可以使用一个补全。 窗口切换CTRL-W CTRL-W: 切换窗口（注意是两次）。 * 告警静音vb | visualbell：屏幕的闪烁代替bell。noeb | noerrorbells：输入出错不响bell。 声明版权： 2018-now，🇨🇳，zangjiaao&lt;zangjiaao@yahoo.com&gt;由家浩创作并维护的zangjiaao's blog博客所有文章除特别声明外，均采用&quot;创作共用保留署名-非商业-禁止演绎4.0国际许可证&quot;。本文首发于zangjiaao’s blog博客，转载请注明出处。]]></content>
      <categories>
        <category>03_工具手册</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexoblog部署记录]]></title>
    <url>%2F2018%2F06%2F09%2FHexoblog%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Hexo博客部署环境搭建依赖安装初始化更新修改主题NexT建立Github项目将源文件托管到Github更新项目配置&amp;说明配置文件说明命令行说明基本配置添加分类 &amp; 标签添加头像添加显示当前进度配置首页只显示简介添加资源目录压缩静态资源压缩静态资源-使用gulp部署到GitHub功能拓展（推荐）markdown-it-plus 插件（不推荐）emoji支持（不推荐）hexo-TOC404页面搜索（本地）搜索（algolia）创建文章时自动打开VSCode添加评论功能添加页面载入进度条其他功能声明 环境搭建 依赖安装Git安装Node.js可参考官方文档。 安装只需要使用npm安装hexo，默认带server了：1npm install -g hexo-cli 初始化刚才安装的那些只是hexo的部署环境以及管理命令，以下才是真正的“建站”，初始化/创建站点文件。12cd hexo_bloghexo init📖 说明：官方文档中还有一步npm install，实际在init时候就做好了。 更新更新hexo，只需npm即可。12cd hexo_bloghexo update 修改主题 NexT⚠️ 注意： 如果需要将整个项目托管到Github，可以暂时忽略本节内容。简介请移步官网，传送门。安装:12cd hexo_bloggit clone https://github.com/theme-next/hexo-theme-next themes/next更新:12cd themes/nextgit pull启用: 修改 站点 的_config.yml文件1theme: next 建立Github项目为了防止辛苦写出来的文章不翼而飞，同时也想用GitHub把源码维护起来，因此将源文件托管到Github。参考Tips for Hexo configuration大神文章。 将源文件托管到Githubfork Next点右上角的fork即可。初始化blog为git项目12cd hexo_bloggit init创建分支（本地），并切换123456789git checkout -b source# 查看是不是进入了source分支git branch master *source# 如果创建错了，可以删除git branch -D bad_branch# 也可以重命名git branch -m bad_branch good_branch将之前fork的next添加到submodule123456789101112131415# 下面的操作会吧themes/next路径添加到submodules中# 并且识别如果目录不存在会自动clonepwd hexo_blog/git submodule add git@github.com:billxllid/next.git themes/next# 添加错了可以删除，不过方法需要自行查找，并不难# 创建自己的next分支，名字随便设置cd themes/nextgit checkout -b zangjiaao# 然后可以随便修改主题配置什么的# 上传分支git add .git commit -m "change configs"# 刚才设置的分支是什么这就是什么git push origin zangjiaao上传到分支（远端）123456789pwd hexo_blog/git add .git commit -m "Initial"git remote add origin# 添加远端仓库地址git@github.com:billxllid/blog.zangjiaao.cn.git# push分支到远端git push origin source 更新项目更新next1234# 新环境才需要initgit submodule init# 正常update即可git submodule update直接更新master分支，而后merge到自己的分支上。123456789101112131415161718pwd themes/nextgit branch *master zangjiaaogit remote add upstream https://github.com/theme-next/hexo-theme-next.gitgit remote -v origin https://github.com/billxllid/next.git (fetch) origin https://github.com/billxllid/next.git (push) upstream https://github.com/theme-next/hexo-theme-next.git (fetch) upstream https://github.com/theme-next/hexo-theme-next.git (push)# 查看master有没有更新git fetch upstream# 可以直接更新远端git pull upstream master# 或者先merge到本地，再push到远端git merge upstream/mastergit push💡 技巧： 可以到自己next项目的自己的分支创建pull来对比一下upstream，看哪里有修改。 配置&amp;说明 配置文件说明_config.yml 站点主要配置文件。package.json hexo所使用的组件信息。scaffolds/ 模板目录。source/ 资源目录，包含原始文章.md以及解析后文章（保存在public目录下）。 命令行说明hexo init 初始化站点文件hexo new [layout] &lt;title&gt; 按照模板layout创建posthexo (g)enerate 生成静态文件-d 创建完后部署（上传到git）-w 检查文件变动hexo server 启动服务器-p 指定端口给-s 只使用静态文件-l 记录日志hexo deploy 部署（上传到git）-g 部署前生成静态文件hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)💡 提醒： 每次修改 站点 _config.yml 文件后由于hexo的缓存问题需要刷新。一种办法是hexo g重新生成，好处是不用重启Server；另一种方法是hexo clean &amp; hexo server，这种我认为更彻底，不过比较麻烦就是。更多详见 指令 。 基本配置简单修改（标题、语言、时区）12345678# Sitetitle: zangjiaao&apos;s blogsubtitle: 滴水穿石...description: 纸上得来终觉浅...keywords:author: jiahaolanguage: zh-CNtimezone: Asia/Shanghai更多详见 官方文档 。 添加分类 &amp; 标签创建:12345# 分类hexo new page categories# 标签hexo new page tags编辑: 在index.md中添加以下内容12345678910111213# 分类---title: categoriesdate: 2018-05-06 00:57:48type: &quot;categories&quot;---# 标签---title: tagsdate: 2018-05-06 00:57:48type: &quot;tags&quot;--- 添加头像配置: 在 主题 的_config.yml中查找avatar并编辑为下面的内容，随后上传头像文件至 站点 的uploads并重命名为avatar.gif。1avatar: /uploads/avatar.gif📖 说明： 放主题对应目录也可以，参考主题配置文件注释中的说明。 添加显示当前进度配置: 在 主题 的_config.yml中查找scrollpercent并将参数改为true即可。 配置首页只显示简介默认情况首页显示的是文章全文，为了查看方便可以为首页配置预览，ThanksTo这篇文章。修改主题配置文件：123auto_excerpt: enable: true length: 150 添加资源目录资源文件主要用来存放例如图片、CSS、JS等文件。如果数量不多，可以放在source/images文件夹中，通过![](/images/image.jpg)引用它们。但是这样资源文件时间一长还是会比较难管理，所以需要开启“文章资源文件夹”功能。修改站点配置：12# _config.ymlpost_asset_folder: true开启后，通过hexo new创建文章时，会自动创建一个同名目录用于存放资源文件。但是使用markdown语法直接引用站点首页无法显示的，所以需要使用下面的语法。1234&#123;% asset_path xxx %&#125;&#123;% asset_img xxx [title] %&#125;&lt;!-- 用于引用js --&gt;&#123;% asset_link xxx [title] %&#125;具体可参考官方：资源文件夹。 压缩静态资源由于hexo在生成静态文件时会产生很多空行，使用chenzhutian/hexo-all-minifier插件来压缩这些文件。安装：1npm install hexo-all-minifier --save对于mac用户还需要安装下面的依赖：1brew install libtool automake autoconf nasm配置站点配置文件：1all_minifier: true并且该插件还支持配置需要压缩的其他内容，可以在官方文档中查看。 压缩静态资源-使用gulp偶遇一大佬使用这个办法进行压缩，感觉很给力的样子。由于我没有试过，这里分享一下链接：Tips for Hexo configuration。 部署到GitHub保能够正常push项目后，按照下面方法进行部署。修改站点配置文件：12345678deploy: type: git repo: https://github.com/billxllid/billxllid.github.io.git branch: master message: Update name: billxllid email: zangjiaao@yahoo.com ignore_hidden: true生成静态文件： 建议先hexo clean清理一下旧数据。12hexo cleanhexo generate📖 说明： 有时候修改文件名、删除分类或者标签，页面上的计数、列表会异常（计数加1，分类没有删除改名之前的文章标题），这时候使用clean就能解决了。部署到Github：1hexo deploy过一会就能够访问了（github需要一段时间处理）。如果有自己域名的同学，可以将域名加一条CNAME到你得gitio上面，然后在项目设置里配置一下。 功能拓展 （推荐）markdown-it-plus 插件这个插件支持TOC和emoji特性，而且不需要为了追求与Next的兼容性去修改配置。同时还兼容sub、sup也就是角标、Katex公式、ins下划线和删除线渲染，可见强大，因此推荐。了解更多。安装: 在站点目录hexo_blog执行12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save配置: 修改 站点 的config.yml文件12345678910markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ pre_class: highlight （不推荐）emoji支持切换渲染: 因为hexo-renderer-marked不支持（实际是支持的crimx/hexo-filter-github-emojis太丑了），固改用markdown-it渲染12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save安装:1npm install markdown-it-emoji --save配置: 注意这里修改的是 站点 的_config.yml123456789101112131415161718192021markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: &apos;“”‘’&apos; plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup - markdown-it-emoji #用emoji插件 anchors: level: 1 collisionSuffix: &apos;v&apos; permalink: true permalinkClass: header-anchor permalinkSymbol: &apos;&apos; #设置&apos;¶&apos;会导致页面中显示出错更多详见 Hexo添加emoji | Very9s 。 （不推荐）hexo-TOC插件bubkoo/hexo-toc与Next主题有极大的冲突，安装之后将导致**侧边目录失效！！**不推荐安装。若迫不得已需要安装也可依据下面内容调整。弥补方法: 通过将${blog_root}/node_modules/hexo-toc/lib/filter.js中的28行~31行改为下面内容。1234$title.attr(&apos;id&apos;, id);// $title.children(&apos;a&apos;).remove();// $title.html( &apos;&lt;span id=&quot;&apos; + id + &apos;&quot;&gt;&apos; + $title.html() + &apos;&lt;/span&gt;&apos; );// $title.removeAttr(&apos;id&apos;);随后还需要替换’markdown-it’，请见上一章节相关安装方法，并修改hexo-toc的配置为：123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: &apos;&apos; #主要删除了symbol style: header-anchor更多详见 Content's link show 'undefine' · Issue #11 · YenYuHsuan/hexo-theme-beantech 中@fawks96的回答。 404页面直接创建source/404.html文件即可，我直接把谷歌文字的错误页面拔了下来改了改，感觉挺有“windows”错误页面的风格，页面源码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091ayout: falsetitle: "404"---&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;head&gt; &lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type"&gt; &lt;title&gt;Oops!&lt;/title&gt; &lt;style type="text/css"&gt; * &#123; padding: 0; margin: 0; &#125; html &#123; overflow-y: scroll; &#125; body &#123; background: #fff; font-family: '微软雅黑'; color: #333; font-size: 16px; &#125; img &#123; border: 0; &#125; .error &#123; padding: 24px 48px; &#125; .face &#123; font-size: 100px; font-weight: normal; line-height: 120px; margin-bottom: 12px; &#125; h1 &#123; font-size: 32px; line-height: 48px; &#125; .error .content &#123; padding-top: 10px &#125; .error .info &#123; margin-bottom: 12px; &#125; .error .info .title &#123; margin-bottom: 3px; &#125; .error .info .title h3 &#123; color: #000; font-weight: 700; font-size: 16px; &#125; .error .info .text &#123; line-height: 24px; &#125; .copyright &#123; padding: 12px 48px; color: #999; &#125; .copyright a &#123; color: #000; text-decoration: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="error"&gt; &lt;p class="face"&gt;:(&lt;/p&gt; &lt;h1&gt;找不到指定文件...&lt;/h1&gt; &lt;div class="title"&gt; &lt;h3&gt;&amp;nbsp;&lt;/h3&gt; &lt;/div&gt; &lt;div class="text"&gt; &lt;p&gt;错误代码：404. &lt;/p&gt; &lt;/div&gt; 搜索（本地）安装: 站点根目录下执行1npm install hexo-generator-searchdb --save配置1: 站点_config.yml中修改12345search: path: search.xml field: post format: html limit: 10000配置2: 主题_config.yml中修改123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 搜索（algolia）本地解析server.xml出现问题，导致本地搜索功能失效，没办法只好采用线上搜索模式。配置方法可参考theme-next/hexo-theme-next。注册algolia账号：访问Algolia官网注册一个账号。获取ID：其中Application ID和Search-only API key需要在下图中获取。indexName需要自己设置：然后站点配置文件需要以下参数：12345algolia: applicationID: 'Application ID' apiKey: 'Search-only API key' indexName: 'indexName' chunkSize: 5000生成数据：对，没错，手动生成…不过晚了可以写个脚本之类的，其实无非就是每次需要执行两条命令而已。1234# 其中的API Key就是上面的export HEXO_ALGOLIA_INDEXING_KEY=Search-Only API keyhexo cleanhexo algolia安装next插件：12cd themes/nextgit clone https://github.com/theme-next/theme-next-algolia-instant-search source/lib/algolia-instant-search配置CDN: 编辑主题的配置文件。1234567vendors: ... # Internal version: 1 # https://www.algolia.com algolia_instant_js: https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js algolia_instant_css: https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css ...打开功能： 最后一步是在主题配置文件中开启。123456789# Algolia Searchalgolia_search: enable: true hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms" 创建文章时自动打开VSCode请参考该文章new 时自动打开 VSCode。 添加评论功能经过测试，多说，来必达都不够友好，发现其他博客上使用“gitment”以及“Hypercomments”作为评论解决方案，试了以下非常给力。官网在这里，登录使用谷歌，所以自备梯子。注册，并获取获取ID注册这里就不细说了，获取ID需要到：settiong - Widget - code的widget_id值。编辑主题配置文件12# Hypercommentshypercomments_id: xxxxxx还有另一种方式，不过没有用过，但是好多人都在用：Valine，以后可以对比一下。 添加页面载入进度条Next主题原生支持，修改主题配置开启即可。123456789101112131415161718pace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-flash更详细说明可参考：theme-next/theme-next-pace。 其他功能插入音乐Hexo+Next主题优化。APlayerHexo博客中插入音乐 声明版权： 2018-now，🇨🇳，zangjiaao&lt;zangjiaao@yahoo.com&gt;由家浩创作并维护的zangjiaao's blog博客所有文章除特别声明外，均采用&quot;创作共用保留署名-非商业-禁止演绎4.0国际许可证&quot;。本文首发于zangjiaao’s blog博客，转载请注明出处。]]></content>
      <categories>
        <category>02_环境搭建</category>
      </categories>
  </entry>
</search>
